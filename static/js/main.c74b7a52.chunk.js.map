{"version":3,"sources":["Token.js","Square.js","Gameboard.js","PlayerList.js","App.js","serviceWorker.js","index.js"],"names":["Token","props","react_default","a","createElement","className","concat","id","r","cx","x","cy","y","Square","width","height","onClick","Gameboard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","maze","tokens","clickedSquare","find","e","playerToken","currentPlayer","endTurn","initialize","numPlayers","i","j","push","value","p","Math","floor","_this2","map","s","src_Square_0","assign","key","t","src_Token_0","React","Component","PlayerList","names","n","App","setState","state","playerNames","length","src_Gameboard_0","src_PlayerList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c74b7a52.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Token.css';\r\n\r\nconst Token = (props) => <circle className={`token player${props.id}`} r=\"15\" cx={props.x} cy={props.y}></circle>\r\n\r\nexport default Token;\r\n","import React from 'react';\r\nimport './Square.css';\r\n\r\nconst Square = (props) => <rect className=\"open square\" x={props.x} y={props.y} width=\"45\" height=\"45\" onClick={() => props.onClick(props.id)}></rect>\r\n\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport './Gameboard.css';\r\n\r\nimport Token from './Token.js';\r\nimport Square from './Square.js';\r\n\r\nclass Gameboard extends React.Component {\r\n  // Generate a random maze configuration to start the game\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialize(this.props.numPlayers);\r\n  }\r\n\r\n  maze = [];\r\n  tokens = [];\r\n\r\n  initialize(numPlayers) {\r\n    // Generate a 9 by 9 array to represent the maze\r\n    let id = 0;\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        this.maze.push({id:id, x: i*50, y:j*50, value:0})\r\n        id++;\r\n      }\r\n    }\r\n\r\n    // Create the tokens for each player at their default starting position\r\n    for (let p = 0; p < numPlayers; p++) {\r\n      this.tokens.push({id:p+1, x:p%2 * 400 + 22, y:Math.floor(p/2) * 400 + 22});\r\n    }\r\n  }\r\n\r\n  // Shift a row or column in the maze by the specified number of squares\r\n  shiftRow() {\r\n\r\n  }\r\n\r\n  // Mark each square in the maze as passable if it can be reached by the position of the current player, specified by x and y\r\n  findValidPath(x, y) {\r\n\r\n  }\r\n\r\n  // If a player clicks on a valid square, move their token to that position and end their turn\r\n  onClick = (id) => {\r\n\r\n    let clickedSquare = this.maze.find((e) => { return e.id === id});\r\n    let playerToken = this.tokens.find((e) => { return e.id === this.props.currentPlayer });\r\n\r\n    if (playerToken && clickedSquare) {\r\n      playerToken.x = clickedSquare.x + 22;\r\n      playerToken.y = clickedSquare.y + 22;\r\n    }\r\n\r\n    this.props.endTurn();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"Gameboard\">\r\n        <svg className=\"maze\" width={this.props.width} height={this.props.height}>\r\n          {this.maze.map(s => <Square key={s.id} {...s} onClick={this.onClick}/>)}\r\n          {this.tokens.map(t => <Token key={t.id} {...t} />)}\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Gameboard;\r\n","import React from 'react';\r\nimport './PlayerList.css';\r\n\r\nclass PlayerList extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <ul id=\"PlayerList\">\r\n        {this.props.names.map((n, i) => <li key={i+1} className={`player${i+1} ${this.props.currentPlayer === i+1 ? 'active' : ''}`} >{n}</li>)}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayerList;\r\n","import React from 'react';\nimport './App.css';\nimport Gameboard from './Gameboard.js';\nimport PlayerList from './PlayerList.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerNames: ['Player 1', 'Player 2', 'Player 3', 'Player 4'],\n      currentPlayer: 1\n    };\n  }\n  \n  // End the current turn and begin turn for the next player\n  endTurn = () => {\n    this.setState((state, props) => ({currentPlayer: state.currentPlayer % state.playerNames.length + 1}));\n  }\n  \n  render() {\n    return (\n      <div id=\"Container\">\n        <h1>Creatures &amp; Corridors</h1>\n        <Gameboard width=\"450\" height=\"450\" numPlayers={this.state.playerNames.length} currentPlayer={this.state.currentPlayer} endTurn={this.endTurn} />\n        <PlayerList names={this.state.playerNames} currentPlayer={this.state.currentPlayer} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}